worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

	server {
        listen       80; server_name  localhost;
        location / { 
			root  C:/ssl; index  index.html index.htm; 
            autoindex on;
        }
    }
		
    server {
		listen 443 ssl; server_name test.iot.vn;
		ssl_certificate C:/ssl/test.iot.vn.crt;
		ssl_certificate_key C:/ssl/test.iot.vn.key;
		
        location / { 
			root  C:/ssl; index  index.html index.htm; 
            autoindex on;
			
			if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
			}
        }
    }
	
	 server {
		listen 4431 ssl;
		server_name test.iot.vn;

		ssl_certificate C:/ssl/test.iot.vn.crt;
		ssl_certificate_key C:/ssl/test.iot.vn.key;
		
		ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers         HIGH:!aNULL:!MD5;

		location / {
		  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		  proxy_set_header Host $host;

		  proxy_pass http://ws-backend;
		  
		  #proxy_pass https://ws-backend;
		  #proxy_ssl_certificate     /etc/ssl/certs/cert.pem;
		  #proxy_ssl_certificate_key /etc/ssl/private/key.pem;


		  proxy_http_version 1.1;
		  proxy_set_header Upgrade $http_upgrade;
		  proxy_set_header Connection "upgrade";
		}
	  }

	  upstream ws-backend {
		# enable sticky session based on IP
		ip_hash;

		server localhost:8080;
	  }
	
}